//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SecurityDoor.WPF.SecurityWeb {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OpenDoor", Namespace="http://tempuri.org/")]
    [System.SerializableAttribute()]
    public partial class OpenDoor : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoomNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CardKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan TimeoutField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoomNumber {
            get {
                return this.RoomNumberField;
            }
            set {
                if ((this.RoomNumberField.Equals(value) != true)) {
                    this.RoomNumberField = value;
                    this.RaisePropertyChanged("RoomNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public System.Guid CardKey {
            get {
                return this.CardKeyField;
            }
            set {
                if ((this.CardKeyField.Equals(value) != true)) {
                    this.CardKeyField = value;
                    this.RaisePropertyChanged("CardKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.TimeSpan Timeout {
            get {
                return this.TimeoutField;
            }
            set {
                if ((this.TimeoutField.Equals(value) != true)) {
                    this.TimeoutField = value;
                    this.RaisePropertyChanged("Timeout");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SecurityWeb.IService")]
    public interface IService {
        
        // CODEGEN: Generating message contract since the operation OpenDoor is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/OpenDoor", ReplyAction="http://tempuri.org/IService/OpenDoorResponse")]
        SecurityDoor.WPF.SecurityWeb.OpenDoorResponse OpenDoor(SecurityDoor.WPF.SecurityWeb.OpenDoorRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/OpenDoor", ReplyAction="http://tempuri.org/IService/OpenDoorResponse")]
        System.IAsyncResult BeginOpenDoor(SecurityDoor.WPF.SecurityWeb.OpenDoorRequest request, System.AsyncCallback callback, object asyncState);
        
        SecurityDoor.WPF.SecurityWeb.OpenDoorResponse EndOpenDoor(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class OpenDoorRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public SecurityDoor.WPF.SecurityWeb.OpenDoor OpenDoor;
        
        public OpenDoorRequest() {
        }
        
        public OpenDoorRequest(SecurityDoor.WPF.SecurityWeb.OpenDoor OpenDoor) {
            this.OpenDoor = OpenDoor;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class OpenDoorResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/", Order=0)]
        public System.Nullable<bool> boolean;
        
        public OpenDoorResponse() {
        }
        
        public OpenDoorResponse(System.Nullable<bool> boolean) {
            this.boolean = boolean;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : SecurityDoor.WPF.SecurityWeb.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OpenDoorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OpenDoorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<bool> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Nullable<bool>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<SecurityDoor.WPF.SecurityWeb.IService>, SecurityDoor.WPF.SecurityWeb.IService {
        
        private BeginOperationDelegate onBeginOpenDoorDelegate;
        
        private EndOperationDelegate onEndOpenDoorDelegate;
        
        private System.Threading.SendOrPostCallback onOpenDoorCompletedDelegate;
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<OpenDoorCompletedEventArgs> OpenDoorCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SecurityDoor.WPF.SecurityWeb.OpenDoorResponse SecurityDoor.WPF.SecurityWeb.IService.OpenDoor(SecurityDoor.WPF.SecurityWeb.OpenDoorRequest request) {
            return base.Channel.OpenDoor(request);
        }
        
        public System.Nullable<bool> OpenDoor(SecurityDoor.WPF.SecurityWeb.OpenDoor OpenDoor1) {
            SecurityDoor.WPF.SecurityWeb.OpenDoorRequest inValue = new SecurityDoor.WPF.SecurityWeb.OpenDoorRequest();
            inValue.OpenDoor = OpenDoor1;
            SecurityDoor.WPF.SecurityWeb.OpenDoorResponse retVal = ((SecurityDoor.WPF.SecurityWeb.IService)(this)).OpenDoor(inValue);
            return retVal.boolean;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SecurityDoor.WPF.SecurityWeb.IService.BeginOpenDoor(SecurityDoor.WPF.SecurityWeb.OpenDoorRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginOpenDoor(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginOpenDoor(SecurityDoor.WPF.SecurityWeb.OpenDoor OpenDoor, System.AsyncCallback callback, object asyncState) {
            SecurityDoor.WPF.SecurityWeb.OpenDoorRequest inValue = new SecurityDoor.WPF.SecurityWeb.OpenDoorRequest();
            inValue.OpenDoor = OpenDoor;
            return ((SecurityDoor.WPF.SecurityWeb.IService)(this)).BeginOpenDoor(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SecurityDoor.WPF.SecurityWeb.OpenDoorResponse SecurityDoor.WPF.SecurityWeb.IService.EndOpenDoor(System.IAsyncResult result) {
            return base.Channel.EndOpenDoor(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Nullable<bool> EndOpenDoor(System.IAsyncResult result) {
            SecurityDoor.WPF.SecurityWeb.OpenDoorResponse retVal = ((SecurityDoor.WPF.SecurityWeb.IService)(this)).EndOpenDoor(result);
            return retVal.boolean;
        }
        
        private System.IAsyncResult OnBeginOpenDoor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SecurityDoor.WPF.SecurityWeb.OpenDoor OpenDoor = ((SecurityDoor.WPF.SecurityWeb.OpenDoor)(inValues[0]));
            return this.BeginOpenDoor(OpenDoor, callback, asyncState);
        }
        
        private object[] OnEndOpenDoor(System.IAsyncResult result) {
            System.Nullable<bool> retVal = this.EndOpenDoor(result);
            return new object[] {
                    retVal};
        }
        
        private void OnOpenDoorCompleted(object state) {
            if ((this.OpenDoorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenDoorCompleted(this, new OpenDoorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenDoorAsync(SecurityDoor.WPF.SecurityWeb.OpenDoor OpenDoor) {
            this.OpenDoorAsync(OpenDoor, null);
        }
        
        public void OpenDoorAsync(SecurityDoor.WPF.SecurityWeb.OpenDoor OpenDoor, object userState) {
            if ((this.onBeginOpenDoorDelegate == null)) {
                this.onBeginOpenDoorDelegate = new BeginOperationDelegate(this.OnBeginOpenDoor);
            }
            if ((this.onEndOpenDoorDelegate == null)) {
                this.onEndOpenDoorDelegate = new EndOperationDelegate(this.OnEndOpenDoor);
            }
            if ((this.onOpenDoorCompletedDelegate == null)) {
                this.onOpenDoorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenDoorCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDoorDelegate, new object[] {
                        OpenDoor}, this.onEndOpenDoorDelegate, this.onOpenDoorCompletedDelegate, userState);
        }
    }
}
